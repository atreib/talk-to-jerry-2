This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-24T00:25:15.572Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    components/
      bg-color-picker/
        component.tsx
        hook.ts
      chat/
        desktop-chat/
          index.tsx
        microphone/
          index.tsx
        actions.ts
        hook.ts
        mobile-caption.tsx
        types.ts
      jerry/
        constants.ts
        hook.ts
        model.tsx
        scene.tsx
        types.ts
      begin.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      button.tsx
      form.tsx
      input.tsx
      label.tsx
  lib/
    openai/
      index.ts
      prompts.ts
      types.ts
    utils.ts
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/components/bg-color-picker/component.tsx">
"use client";
type Props = {
  bgColor: string;
  changeBgColor: (color: string) => void;
};
export function BackgroundColorPicker({ bgColor, changeBgColor }: Props) {
  return (
    <div className="absolute top-32 right-0 m-2 bg-background/40 text-foregound rounded-lg p-2 z-10 shadow border border-border">
      <input
        type="color"
        value={bgColor}
        onChange={(e) => changeBgColor(e.target.value)}
        className="w-6 h-6 cursor-pointer rounded"
      />
    </div>
  );
}
</file>

<file path="src/app/components/bg-color-picker/hook.ts">
"use client";
import * as React from "react";
export function useBgColor() {
  const [bgColor, setBgColor] = React.useState(() => {
    // Initialize from session storage if available, otherwise use default white
    if (typeof window !== "undefined") {
      return localStorage.getItem("bgColor") || "#ffffff";
    }
    return "#ffffff";
  });
  function changeBgColor(color: string) {
    setBgColor(color);
    localStorage.setItem("bgColor", color);
  }
  return { bgColor, changeBgColor };
}
</file>

<file path="src/app/components/chat/desktop-chat/index.tsx">
"use client";
import * as React from "react";
import { Message } from "../types";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
type Props = {
  messages: Array<Message>;
  onMessageSend: (message: string) => Promise<void>;
};
export function DesktopChat({ messages, onMessageSend }: Props) {
  const chatContainerRef = React.useRef<HTMLDivElement>(null);
  const [inputValue, setInputValue] = React.useState("");
  const handleSubmit = async () => {
    await onMessageSend(inputValue);
    setInputValue("");
  };
  const scrollToBottom = () => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  };
  React.useEffect(() => {
    scrollToBottom();
  }, [messages]);
  return (
    <div className="hidden md:flex fixed bottom-4 left-4 md:w-1/2 lg:w-1/3 xl:w-1/4 bg-background/40 rounded overflow-hidden flex-col shadow-lg border border-border">
      <div
        ref={chatContainerRef}
        className="h-[30dvh] overflow-y-auto p-4 flex flex-col gap-2"
      >
        {messages.map((msg, i) => (
          <div
            key={i}
            className={`flex flex-col ${
              msg.sender === "you" ? "items-end" : "items-start"
            }`}
          >
            <div
              className={`px-3 py-2 rounded-lg max-w-[80%] ${
                msg.sender === "you"
                  ? "bg-primary text-primary-foreground"
                  : "bg-secondary text-secondary-foreground"
              }`}
            >
              <div className="text-sm">{msg.text}</div>
              <div className="text-xs mt-1">
                {msg.sender} â€¢ {msg.timestamp.toLocaleTimeString()}
              </div>
            </div>
          </div>
        ))}
      </div>
      <form
        onSubmit={handleSubmit}
        className="p-2 border-t border-border bg-background"
      >
        {/* {listening && (
          <div className="mt-2 text-sm text-gray-300">
            {transcript || "Listening..."}
          </div>
        )} */}
        <div className="flex gap-2">
          <Input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                handleSubmit();
              }
            }}
            placeholder="Type your message..."
          />
          <Button type="submit">Send</Button>
          {/* <MicrophoneButton /> */}
        </div>
      </form>
    </div>
  );
}
</file>

<file path="src/app/components/chat/microphone/index.tsx">
"use cilent";
import * as React from "react";
import { Button, ButtonProps } from "@/components/ui/button";
import { MicIcon } from "lucide-react";
import SpeechRecognition, {
  useSpeechRecognition,
} from "react-speech-recognition";
type Props = {
  onMessageSend: (message: string) => Promise<void>;
};
export function Microphone({ onMessageSend }: Props) {
  const [isProcessing, setIsProcessing] = React.useState(false);
  const {
    transcript,
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition,
  } = useSpeechRecognition();
  const variant: ButtonProps["variant"] = listening ? "destructive" : "default";
  const handleMicClick = () => {
    if (listening) {
      stopListening();
    } else {
      SpeechRecognition.startListening({ continuous: true });
    }
  };
  const stopListening = async () => {
    if (isProcessing) return;
    setIsProcessing(true);
    // Add a small delay to ensure we get the complete transcript
    await new Promise((resolve) => setTimeout(resolve, 1500));
    SpeechRecognition.stopListening();
    if (transcript.trim()) {
      const userMessage = transcript.trim();
      await onMessageSend(userMessage);
      resetTranscript();
    }
    setIsProcessing(false);
  };
  return (
    <div className="fixed bottom-4 right-4 flex gap-2 items-center justify-end">
      <span className="md:hidden block bg-muted text-muted-foreground text-xs h-min p-2 rounded break-word m-2 w-full md:w-1/3 lg:w-1/2">
        Tap to talk and tap again to stop
      </span>
      <Button
        size="microphone"
        className="rounded-full aspect-square"
        variant={variant}
        disabled={!browserSupportsSpeechRecognition || isProcessing}
        onClick={handleMicClick}
      >
        <MicIcon className="!h-8 !w-8" />
      </Button>
    </div>
  );
}
</file>

<file path="src/app/components/chat/actions.ts">
"use server";
import { ask } from "@/lib/openai";
import { Message } from "./types";
type GetAnswerProps = {
  question: string;
  messageHistory: Message[];
};
export async function getAnswer(props: GetAnswerProps) {
  const answer = await ask({
    question: props.question,
    history: props.messageHistory.map((msg) => ({
      role: msg.sender === "you" ? ("user" as const) : ("assistant" as const),
      content: msg.text,
    })),
  });
  return {
    content: answer.content,
    speechTime: answer.content.length * 90,
  };
}
</file>

<file path="src/app/components/chat/hook.ts">
"use client";
import * as React from "react";
import { Message } from "./types";
type Props = {
  welcomeMessage: string;
};
export function useChat({ welcomeMessage }: Props) {
  const [messages, setMessages] = React.useState<Array<Message>>([
    {
      text: welcomeMessage,
      sender: "jerry",
      timestamp: new Date(),
    },
  ]);
  async function sendMessage(props: {
    message: Message["text"];
    sender: Message["sender"];
  }) {
    setMessages((prev) => [
      ...prev,
      { text: props.message, sender: props.sender, timestamp: new Date() },
    ]);
  }
  return { messages, sendMessage };
}
</file>

<file path="src/app/components/chat/mobile-caption.tsx">
"use client";
import { Message } from "./types";
type Props = {
  lastMessage?: Message;
};
export function MobileCaption({ lastMessage }: Props) {
  if (!lastMessage) return null;
  return (
    <div className="lg:hidden fixed top-0 left-0 right-0 w-full z-10 p-4">
      <p className="bg-background text-foreground h-min p-2 rounded break-word m-4 text-center">
        {lastMessage?.text}
      </p>
    </div>
  );
}
</file>

<file path="src/app/components/chat/types.ts">
export type Message = {
  text: string;
  sender: "you" | "jerry";
  timestamp: Date;
};
</file>

<file path="src/app/components/jerry/constants.ts">
export const jerry3dModelUrl = "/jerry.glb";
</file>

<file path="src/app/components/jerry/hook.ts">
"use client";
import * as React from "react";
import * as THREE from "three";
import * as constants from "./constants";
import { useGLTF } from "@react-three/drei";
import { JerryAnimationState } from "./types";
export function useJerry() {
  const group = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF(constants.jerry3dModelUrl);
  const [animationState, setAnimationState] =
    React.useState<JerryAnimationState>("idle");
  return {
    animationState,
    setAnimationState,
    group,
    scene,
    animations,
  };
}
</file>

<file path="src/app/components/jerry/model.tsx">
"use client";
import * as React from "react";
import { jerryAnimationCatalog, JerryAnimationState } from "./types";
import * as THREE from "three";
import { useAnimations } from "@react-three/drei";
type Props = {
  animationState: JerryAnimationState;
  group: React.RefObject<THREE.Group | null>;
  scene: THREE.Object3D;
  animations: THREE.AnimationClip[];
};
export function JerryModel({
  animationState,
  group,
  scene,
  animations,
}: Props) {
  const { actions } = useAnimations(animations, group);
  React.useEffect(() => {
    // Stop all animations
    Object.values(actions).forEach((action) => action?.stop());
    // Play the appropriate animation based on state
    if (animationState === "idle" && actions.Idle) {
      actions.Idle.play();
    } else if (animationState === "talking" && actions.Talking) {
      actions.Talking.play();
    } else if (animationState === "thinking" && actions.Thinking) {
      actions.Thinking.play();
    }
  }, [actions, animationState]);
  return (
    <primitive
      ref={group}
      object={scene}
      position={[0, 0, 0]}
      scale={1.8}
      rotation={jerryAnimationCatalog[animationState].rotation}
    />
  );
}
</file>

<file path="src/app/components/jerry/scene.tsx">
"use client";
import "regenerator-runtime/runtime";
import * as React from "react";
import { CameraProps, Canvas } from "@react-three/fiber";
import { OrbitControls, Environment } from "@react-three/drei";
import { BackgroundColorPicker } from "../bg-color-picker/component";
import { useBgColor } from "../bg-color-picker/hook";
import { JerryModel } from "./model";
import { useJerry } from "./hook";
import { DesktopChat } from "../chat/desktop-chat";
import { useChat } from "../chat/hook";
import { getAnswer } from "../chat/actions";
import { Microphone } from "../chat/microphone";
import { MobileCaption } from "../chat/mobile-caption";
type Props = {
  welcomeMessage: string;
};
export function JerryScene({ welcomeMessage }: Props) {
  const { bgColor, changeBgColor } = useBgColor();
  const jerryController = useJerry();
  const { messages, sendMessage } = useChat({ welcomeMessage });
  const initialCamera = {
    position: [0, 1, 3],
    fov: 40,
  } as CameraProps;
  const askToJerry = async (userMessage: string) => {
    jerryController.setAnimationState("thinking");
    try {
      sendMessage({
        message: userMessage,
        sender: "you",
      });
      const answer = await getAnswer({
        question: userMessage,
        messageHistory: messages,
      });
      // Handle Jerry answer
      jerryController.setAnimationState("talking");
      const utterance = new window.SpeechSynthesisUtterance(answer.content);
      window.speechSynthesis.speak(utterance);
      sendMessage({
        message: answer.content,
        sender: "jerry",
      });
      // Keep on talking animation for a time based on answer size
      await new Promise((resolve) => setTimeout(resolve, answer.speechTime));
    } catch (error) {
      console.error("Jerry can't talk right now... ", { error });
    } finally {
      jerryController.setAnimationState("idle");
    }
  };
  return (
    <div className="w-screen h-screen">
      <BackgroundColorPicker bgColor={bgColor} changeBgColor={changeBgColor} />
      <Canvas camera={initialCamera}>
        <color attach="background" args={[bgColor]} />
        <ambientLight intensity={0.5} />
        <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
        <pointLight position={[-10, -10, -10]} />
        <JerryModel
          animationState={jerryController.animationState}
          group={jerryController.group}
          scene={jerryController.scene}
          animations={jerryController.animations}
        />
        <Environment preset="city" />
        <OrbitControls
          enableZoom={true}
          enablePan={true}
          enableRotate={true}
          maxDistance={10}
          minDistance={1}
          target={[0, 1.5, 0]}
        />
      </Canvas>
      <DesktopChat messages={messages} onMessageSend={askToJerry} />
      <MobileCaption
        lastMessage={messages.filter((x) => x.sender === "jerry").at(-1)}
      />
      <Microphone onMessageSend={askToJerry} />
    </div>
  );
}
</file>

<file path="src/app/components/jerry/types.ts">
export const jerryAnimationCatalog = {
  idle: {
    rotation: [0, 0, 0],
  },
  talking: {
    rotation: [0, -0.5, 0],
  },
  thinking: {
    rotation: [0, 0, 0],
  },
};
export type JerryAnimationState = keyof typeof jerryAnimationCatalog;
export type JerryAnimation =
  (typeof jerryAnimationCatalog)[JerryAnimationState];
</file>

<file path="src/app/components/begin.tsx">
"use client";
import { Button } from "@/components/ui/button";
import { MessageCircleHeartIcon } from "lucide-react";
import * as React from "react";
type Props = {
  welcomeMessage: string;
};
export function BeginButton({ welcomeMessage }: Props) {
  const [hasBegun, setHasBegun] = React.useState(false);
  const handleBegin = () => {
    const utterance = new window.SpeechSynthesisUtterance(welcomeMessage);
    window.speechSynthesis.speak(utterance);
    setHasBegun(true);
    sessionStorage.setItem("hasBegun", "true");
  };
  if (hasBegun) return null;
  return (
    <div className="fixed inset-0 w-screen h-screen bg-black/80 flex items-center justify-center z-50">
      <div className="flex flex-col items-center justify-center gap-4">
        <p className="text-sm text-white">
          Enable your sound before continuing...
        </p>
        <Button size="lg" onClick={handleBegin}>
          <MessageCircleHeartIcon className="w-4 h-4 mr-2" />
          Click here to talk to Jerry
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
export const metadata: Metadata = {
  title: "Talk to Jerry",
  description: "Jerry, your smart friend",
  authors: [{ name: "AndrÃ© Treib", url: "https://andretreib.com" }],
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
import { BeginButton } from "./components/begin";
import { JerryScene } from "./components/jerry/scene";
const welcomeMessage = "Hey, I'm Jerry. Nice to meet you!";
export default function Home() {
  return (
    <>
      <BeginButton welcomeMessage={welcomeMessage} />
      <JerryScene welcomeMessage={welcomeMessage} />
    </>
  );
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
        microphone: "h-12 w-12",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";
export { Button, buttonVariants };
</file>

<file path="src/components/ui/form.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)
const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"
const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()
  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"
const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"
const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()
  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"
const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children
  if (!body) {
    return null
  }
  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"
export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)
const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName
export { Label }
</file>

<file path="src/lib/openai/index.ts">
import "server-only";
import { Answer, Message } from "./types";
import * as prompts from "./prompts";
type AskProps = {
  question: string;
  injectedApiKey?: string;
  history: Message[];
};
export async function ask({ question, history }: AskProps): Promise<Answer> {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error("OPENAI_API_KEY is not set");
  }
  try {
    const messages = [
      { role: "system", content: prompts.jerryIntroduction },
      ...history,
      { role: "user", content: question },
    ];
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7,
        max_tokens: 150,
      }),
    });
    if (!response.ok) {
      const error = await response.json().catch(() => ({}));
      throw new Error(
        error.error?.message || `HTTP error! status: ${response.status}`
      );
    }
    const data = await response.json();
    const content = String(
      data.choices[0]?.message?.content ??
        "Sorry, I could not generate a response."
    );
    return {
      content,
    };
  } catch (error) {
    console.error("Error calling OpenAI:", error);
    throw error instanceof Error
      ? error
      : new Error("Failed to get response from AI");
  }
}
</file>

<file path="src/lib/openai/prompts.ts">
export const jerryIntroduction = `
You are a Jerry.
You are friendly and fun.
You are talking to a kid right now.
You like doing jokes and making kids laugh.
You only answer with VERY short and concise answers.
Never talk about yourself in the third person.
NEVER talk about adult content.
For any controversial topics, always suggest the kid to ask their parent, say "let's talk about something else", and ask a question about the kid.
You want to know more about the person you are talking to.
`;
</file>

<file path="src/lib/openai/types.ts">
export type Answer = {
  content: string;
};
export type Message = {
  role: "user" | "assistant" | "system";
  content: string;
};
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
!.env.sample

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";
const nextConfig: NextConfig = {
  /* config options here */
};
export default nextConfig;
</file>

<file path="package.json">
{
  "name": "talk-to-jerry",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.1",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@react-three/drei": "^10.0.1",
    "@react-three/fiber": "^9.0.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.475.0",
    "next": "15.1.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-speech-recognition": "^3.10.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.173.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-speech-recognition": "^3.9.6",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";
export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
